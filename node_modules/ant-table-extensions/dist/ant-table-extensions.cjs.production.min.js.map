{"version":3,"file":"ant-table-extensions.cjs.production.min.js","sources":["../src/ExportTableButton.tsx","../src/SearchTableInput.tsx","../src/index.tsx","../src/hooks/isMounted.tsx"],"sourcesContent":["import React, { Fragment, ReactChild, ReactNode, useEffect } from \"react\";\r\nimport { Button, Modal, Checkbox } from \"antd\";\r\nimport Papa from \"papaparse\";\r\nimport difference from \"lodash/difference\";\r\nimport union from \"lodash/union\";\r\nimport get from \"lodash/get\";\r\nimport set from \"lodash/set\";\r\nimport { ColumnsType, ColumnGroupType, ColumnType } from \"antd/lib/table\";\r\nimport { ButtonProps } from \"antd/lib/button\";\r\n\r\nexport interface ITableExportFields {\r\n  [dataIndex: string]:\r\n    | string\r\n    | {\r\n        header: string;\r\n        formatter?: (fieldValue: any, record: any, index: number) => string;\r\n      };\r\n}\r\n\r\nexport interface IExportFieldButtonProps {\r\n  /** Ant table's dataSource */\r\n  dataSource?: any[];\r\n  /** Ant table's columns */\r\n  columns?: ColumnsType<any>;\r\n  /** File name to use when exporting to csv */\r\n  fileName?: string;\r\n  /** Customize csv file like column header names, fields to include/exclude. More on this below. */\r\n  fields?: ITableExportFields;\r\n  /** Disables export button. Useful when you want to disable when dataSource is loading. */\r\n  disabled?: boolean;\r\n  /** Any of Ant Button component props as object. */\r\n  btnProps?: ButtonProps;\r\n  /** Can be used to change text in button. */\r\n  children?: ReactChild | ReactNode;\r\n  /** Shows a modal to pick which columns to include exported file. */\r\n  showColumnPicker?: boolean;\r\n}\r\n\r\ntype ColumnWithDataIndex = (ColumnGroupType<any> | ColumnType<any>) & {\r\n  dataIndex?: string | string[];\r\n};\r\n\r\nconst getFieldsFromColumns = (\r\n  columns: ColumnsType<any>\r\n): ITableExportFields => {\r\n  const fields = {};\r\n  columns?.forEach((column: ColumnWithDataIndex) => {\r\n    const { title, key, dataIndex } = column;\r\n    const fieldName =\r\n      (Array.isArray(dataIndex) ? dataIndex.join(\".\") : dataIndex) ?? key;\r\n    if (fieldName) {\r\n      set(fields, fieldName, title);\r\n    }\r\n  });\r\n\r\n  return fields;\r\n};\r\n\r\nconst cleanupDataSource = (dataSource, exportFieldNames, selectedFields) => {\r\n  if (!dataSource || dataSource.length === 0) {\r\n    return { data: [], fields: [] };\r\n  }\r\n\r\n  const newData = [...dataSource];\r\n  const fields = selectedFields.map(fieldName => {\r\n    const fieldValue = get(exportFieldNames, fieldName);\r\n    if (typeof fieldValue === \"string\") {\r\n      return fieldValue;\r\n    }\r\n    return fieldValue.header || \"\";\r\n  });\r\n\r\n  const data = newData.map((record, rowIndex) => {\r\n    return selectedFields.map(fieldName => {\r\n      const fieldValue = get(exportFieldNames, fieldName);\r\n      const recordValue = get(record, fieldName);\r\n      if (typeof fieldValue === \"string\") {\r\n        return recordValue;\r\n      }\r\n      return fieldValue?.formatter(recordValue, record, rowIndex) || null;\r\n    });\r\n  });\r\n\r\n  return [fields, ...data];\r\n};\r\n\r\nexport const ExportTableButton: React.FC<IExportFieldButtonProps> = props => {\r\n  const {\r\n    dataSource = [],\r\n    fileName,\r\n    fields,\r\n    disabled,\r\n    btnProps,\r\n    columns = [],\r\n    showColumnPicker = false,\r\n  } = props;\r\n\r\n  const [showModal, setShowModal] = React.useState(false);\r\n\r\n  const fieldsOrColumns = fields ?? getFieldsFromColumns(columns);\r\n\r\n  const [selectedFields, setSelectedFields] = React.useState(() => {\r\n    if (fields) {\r\n      return Object.keys(fields);\r\n    } else if (columns) {\r\n      return Object.keys(getFieldsFromColumns(columns));\r\n    }\r\n\r\n    return [];\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (fields) {\r\n      setSelectedFields(Object.keys(fields));\r\n    } else if (columns) {\r\n      setSelectedFields(Object.keys(getFieldsFromColumns(columns)));\r\n    }\r\n  }, [fields, columns]);\r\n\r\n  const handleDownloadCSV = React.useCallback(() => {\r\n    if (!dataSource) {\r\n      return;\r\n    }\r\n\r\n    let selectedFieldsInOriginalOrder = Object.keys(fieldsOrColumns).filter(\r\n      name => selectedFields.indexOf(name) > -1\r\n    );\r\n\r\n    const data = cleanupDataSource(\r\n      dataSource,\r\n      fieldsOrColumns,\r\n      selectedFieldsInOriginalOrder\r\n    );\r\n\r\n    const csv = Papa.unparse(data, {\r\n      greedy: true,\r\n      header: false,\r\n    });\r\n    const blob = new Blob([csv]);\r\n    const a = window.document.createElement(\"a\");\r\n    a.href = window.URL.createObjectURL(blob);\r\n    a.download = `${fileName || \"table\"}.csv`;\r\n    document.body.appendChild(a);\r\n    a.click();\r\n    document.body.removeChild(a);\r\n\r\n    setShowModal(false);\r\n  }, [dataSource, fieldsOrColumns, selectedFields, fileName]);\r\n\r\n  const handleCheckboxChange = React.useCallback(\r\n    (key, checked) => {\r\n      let newSelectedFields = [...selectedFields];\r\n      if (checked) {\r\n        newSelectedFields = union(newSelectedFields, [key]);\r\n      } else {\r\n        newSelectedFields = difference(newSelectedFields, [key]);\r\n      }\r\n\r\n      setSelectedFields(newSelectedFields);\r\n    },\r\n    [selectedFields]\r\n  );\r\n\r\n  return (\r\n    <Fragment>\r\n      <Button\r\n        onClick={() =>\r\n          showColumnPicker ? setShowModal(true) : handleDownloadCSV()\r\n        }\r\n        disabled={disabled}\r\n        {...btnProps}\r\n      >\r\n        {props.children ?? `Export to CSV`}\r\n      </Button>\r\n      {showColumnPicker ? (\r\n        <Modal\r\n          visible={showModal}\r\n          onOk={() => handleDownloadCSV()}\r\n          onCancel={() => setShowModal(false)}\r\n          width={400}\r\n          okButtonProps={{\r\n            disabled: selectedFields.length < 1,\r\n            title:\r\n              selectedFields.length < 1\r\n                ? \"Please select at least one column.\"\r\n                : null,\r\n          }}\r\n          okText={\"Export\"}\r\n          title={\"Select columns to export\"}\r\n        >\r\n          <div className=\"d-flex flex-column align-start\">\r\n            {Object.entries(fieldsOrColumns).map(([key, value]) => {\r\n              return (\r\n                <Checkbox\r\n                  key={key}\r\n                  style={{ padding: 0, margin: 0 }}\r\n                  defaultChecked={true}\r\n                  checked={selectedFields.indexOf(key) > -1}\r\n                  onChange={e => handleCheckboxChange(key, e.target.checked)}\r\n                >\r\n                  {typeof value === \"string\" ? value : value?.header ?? \"\"}\r\n                </Checkbox>\r\n              );\r\n            })}\r\n          </div>\r\n        </Modal>\r\n      ) : null}\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default ExportTableButton;\r\n","import React, { useState, useRef, useEffect } from \"react\";\r\nimport { Input } from \"antd\";\r\nimport debounceFn from \"lodash/debounce\";\r\nimport Fuse from \"fuse.js\";\r\nimport { InputProps } from \"antd/lib/input\";\r\nimport { ColumnsType } from \"antd/lib/table\";\r\n\r\nexport interface ISearchTableInputProps {\r\n  /** Custom function to search if you want to use your own search.\r\n   *  Takes dataSource and searchTerm and should return filtered dataSource.\r\n   */\r\n  searchFunction?: (dataSource: any[], searchTerm: string) => any[];\r\n\r\n  /** Ant table's dataSource. */\r\n  dataSource?: any[];\r\n\r\n  /** Ant table's columns */\r\n  columns?: ColumnsType<any>;\r\n\r\n  /** `setState` style function which updates dataSource. */\r\n  setDataSource?: (dataSource: any[]) => void;\r\n  /** Debounces search  */\r\n  debounce?: boolean;\r\n  /** Any of Ant Input component's props as object. */\r\n  inputProps?: InputProps;\r\n  /** Allow fuzzy search or search for exact search term. */\r\n  fuzzySearch?: boolean;\r\n  /** Uses Fuse.js for search. Pass any of fuse.js options here as object. */\r\n  fuseProps?: Fuse.IFuseOptions<any>;\r\n}\r\n\r\nconst getGroupedColumnKeysFromChildren = (column: any, keys = []) => {\r\n  for (const child of column.children) {\r\n    if (child.children && Array.isArray(child.children)) {\r\n      // If child has children, recurse\r\n      keys = getGroupedColumnKeysFromChildren(child, keys);\r\n    } else {\r\n      if (!child.dataIndex) {\r\n        continue;\r\n      }\r\n\r\n      if (Array.isArray(child.dataIndex)) {\r\n        keys = [...keys, child.dataIndex.join(\".\")];\r\n        continue;\r\n      }\r\n\r\n      keys = [...keys, child.dataIndex];\r\n    }\r\n  }\r\n\r\n  return keys;\r\n};\r\n\r\nconst createDefaultFuseKeys = (dataSource: any[], columns: any[]) => {\r\n  const firstRecord = dataSource?.[0];\r\n  const keys = columns\r\n    .map(column => {\r\n      const { dataIndex, children } = column;\r\n      // check if grouped column\r\n      if (children && Array.isArray(children)) {\r\n        const keys = getGroupedColumnKeysFromChildren(column, []);\r\n        return keys?.flat();\r\n      }\r\n      // ant table allows nested objects with array of strings as dataIndex\r\n      if (Array.isArray(dataIndex)) {\r\n        return dataIndex.join(\".\");\r\n      }\r\n\r\n      // If in actual dataIndex the record is object literal but column specified as string, throw error.\r\n      // Even though it's something you shouldn't do based on ant table's API, since users will see fuse.js `value.trim is not a function error` I'm throwing error.\r\n      if (\r\n        firstRecord &&\r\n        Object.prototype.toString.call(firstRecord[dataIndex]) ===\r\n          \"[object Object]\" &&\r\n        typeof dataIndex === \"string\"\r\n      ) {\r\n        throw new Error(\r\n          `'${dataIndex}' is an object in dataSource. But dataIndex is given as string. If it is an object, use array of strings as dataIndex.`\r\n        );\r\n      }\r\n      return dataIndex;\r\n    })\r\n    .filter(dataIndex => !!dataIndex)\r\n    .flat(10)\r\n    .filter(dataIndex => typeof dataIndex === \"string\"); // after flattening max depth 10, if there are still arrays, ignore\r\n\r\n  return keys;\r\n};\r\n\r\nexport const SearchTableInput: React.FC<ISearchTableInputProps> = ({\r\n  searchFunction = null,\r\n  dataSource,\r\n  setDataSource,\r\n  debounce = true,\r\n  inputProps = {\r\n    placeholder: \"Search...\",\r\n  },\r\n  fuzzySearch = false,\r\n  columns,\r\n  fuseProps,\r\n}) => {\r\n  const [query, setQuery] = useState<string>(\"\");\r\n  const allData = useRef<any[] | null>();\r\n  const fuse = useRef<Fuse<any> | null>();\r\n\r\n  const _fuseProps = React.useMemo(() => {\r\n    return {\r\n      keys: createDefaultFuseKeys(dataSource, columns),\r\n      threshold: fuzzySearch ? 0.6 : 0,\r\n      ...fuseProps,\r\n    };\r\n  }, [fuseProps, dataSource, columns, fuzzySearch]);\r\n\r\n  const searchTable = (_dataSource: any[], searchTerm = \"\") => {\r\n    if (searchTerm === \"\" || !fuse || !fuse.current) {\r\n      return allData.current;\r\n    }\r\n\r\n    const newResults = fuse.current.search(searchTerm).map(res => res.item);\r\n    return newResults;\r\n  };\r\n\r\n  const searchTableDebounced = React.useCallback(\r\n    debounceFn(\r\n      (dataSource: any, searchTerm: string, searchFn: any) => {\r\n        const results = searchFn?.(dataSource, searchTerm);\r\n        setDataSource(results);\r\n      },\r\n      100,\r\n      {\r\n        leading: false,\r\n        trailing: true,\r\n      }\r\n    ),\r\n    []\r\n  );\r\n\r\n  const handleInputChange = (e: { target: { value: any } }) => {\r\n    const value = e.target.value;\r\n    setQuery(value);\r\n\r\n    if (debounce) {\r\n      searchTableDebounced(dataSource, value, searchFunction ?? searchTable);\r\n    } else {\r\n      const results =\r\n        searchFunction?.(dataSource, value) ?? searchTable(dataSource, value);\r\n      setDataSource(results);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (!dataSource) {\r\n      return;\r\n    }\r\n\r\n    allData.current = [...dataSource];\r\n    fuse.current = new Fuse(dataSource, _fuseProps);\r\n  }, [dataSource, _fuseProps]);\r\n\r\n  useEffect(() => {\r\n    // If dataSource updates dynamically (for example, swr or react-query mutates) and the input box is not empty,\r\n    // It should keep the new dataSource filtered if there is a value in input box\r\n    if (!dataSource || !query) {\r\n      return;\r\n    }\r\n\r\n    if (debounce) {\r\n      searchTableDebounced(dataSource, query, searchFunction ?? searchTable);\r\n    } else {\r\n      const results =\r\n        searchFunction?.(dataSource, query) ?? searchTable(dataSource, query);\r\n      setDataSource(results);\r\n    }\r\n  }, [\r\n    query,\r\n    dataSource,\r\n    searchTableDebounced,\r\n    searchFunction,\r\n    setDataSource,\r\n    debounce,\r\n  ]);\r\n\r\n  return (\r\n    <Input\r\n      value={query}\r\n      onChange={handleInputChange}\r\n      placeholder=\"Search...\"\r\n      allowClear\r\n      {...inputProps}\r\n    />\r\n  );\r\n};\r\n\r\nexport default SearchTableInput;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Table as AntTable } from \"antd\";\r\nimport { TableProps } from \"antd/lib/table\";\r\nimport ExportTableButton, {\r\n  IExportFieldButtonProps,\r\n} from \"./ExportTableButton\";\r\nimport SearchTableInput, { ISearchTableInputProps } from \"./SearchTableInput\";\r\nimport { useMountedState } from \"./hooks/isMounted\";\r\n\r\nexport * from \"./ExportTableButton\";\r\nexport * from \"./SearchTableInput\";\r\n\r\nexport type IExportableTableProps = TableProps<any> & IExportFieldButtonProps;\r\n\r\nexport type ITableUtils = {\r\n  /** Exportable Table */\r\n  exportable?: boolean;\r\n  /** Props object to customize export button */\r\n  exportableProps?: IExportFieldButtonProps;\r\n  /** Searchable Table */\r\n  searchable?: boolean;\r\n  /** Props object to customize export button */\r\n  searchableProps?: ISearchTableInputProps;\r\n};\r\n\r\nexport type ITableProps<T> = TableProps<T> & ITableUtils;\r\n\r\nexport const Table: React.FC<ITableProps<any>> = ({\r\n  exportable = false,\r\n  exportableProps,\r\n  searchable = false,\r\n  searchableProps,\r\n  dataSource,\r\n  columns,\r\n  ...otherProps\r\n}) => {\r\n  const isMounted = useMountedState();\r\n  const isExportable = exportable || exportableProps;\r\n  const isSearchable = searchable || searchableProps;\r\n  const [searchDataSource, setSearchDataSource] = useState<any>(dataSource);\r\n\r\n  useEffect(() => {\r\n    if (isSearchable && isMounted()) {\r\n      setSearchDataSource(dataSource);\r\n    }\r\n  }, [isSearchable, dataSource, isMounted]);\r\n\r\n  return (\r\n    <div>\r\n      <div\r\n        style={{\r\n          display: \"flex\",\r\n          justifyContent: \"space-between\",\r\n          marginBottom: 10,\r\n        }}\r\n      >\r\n        {isExportable ? (\r\n          <ExportTableButton\r\n            dataSource={dataSource}\r\n            columns={columns}\r\n            {...exportableProps}\r\n          />\r\n        ) : null}\r\n        {isSearchable ? (\r\n          <SearchTableInput\r\n            columns={columns}\r\n            dataSource={dataSource}\r\n            setDataSource={setSearchDataSource}\r\n            {...searchableProps}\r\n            inputProps={{\r\n              style: {\r\n                width: isExportable ? \"60%\" : \"100%\",\r\n                ...searchableProps?.inputProps?.style,\r\n              },\r\n              ...searchableProps?.inputProps,\r\n            }}\r\n          />\r\n        ) : null}\r\n      </div>\r\n      <AntTable\r\n        dataSource={isSearchable ? searchDataSource : dataSource}\r\n        columns={columns}\r\n        {...otherProps}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n","import { useEffect, useRef, useCallback } from \"react\";\n\nexport function useMountedState() {\n  const ref = useRef(false);\n  const state = useCallback(() => ref.current, []);\n  useEffect(() => {\n    ref.current = true;\n    return () => {\n      ref.current = false;\n    };\n  });\n\n  return state;\n}\n"],"names":["getFieldsFromColumns","columns","fields","forEach","column","title","key","dataIndex","fieldName","Array","isArray","join","set","ExportTableButton","props","dataSource","fileName","disabled","btnProps","showColumnPicker","React","useState","showModal","setShowModal","fieldsOrColumns","Object","keys","selectedFields","setSelectedFields","useEffect","handleDownloadCSV","useCallback","selectedFieldsInOriginalOrder","filter","name","indexOf","data","exportFieldNames","length","newData","map","fieldValue","get","header","record","rowIndex","recordValue","formatter","cleanupDataSource","csv","Papa","unparse","greedy","blob","Blob","a","window","document","createElement","href","URL","createObjectURL","download","body","appendChild","click","removeChild","handleCheckboxChange","checked","newSelectedFields","union","difference","Fragment","Button","onClick","children","Modal","visible","onOk","onCancel","width","okButtonProps","okText","className","entries","value","Checkbox","style","padding","margin","defaultChecked","onChange","e","target","createDefaultFuseKeys","firstRecord","getGroupedColumnKeysFromChildren","child","flat","prototype","toString","call","Error","SearchTableInput","searchFunction","setDataSource","debounce","inputProps","placeholder","fuzzySearch","fuseProps","query","setQuery","allData","useRef","fuse","_fuseProps","useMemo","threshold","searchTable","_dataSource","searchTerm","current","search","res","item","searchTableDebounced","debounceFn","searchFn","results","leading","trailing","Fuse","Input","allowClear","ref","state","exportable","exportableProps","searchable","searchableProps","otherProps","isMounted","isExportable","isSearchable","searchDataSource","setSearchDataSource","display","justifyContent","marginBottom","_searchableProps$inpu","AntTable"],"mappings":"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"}