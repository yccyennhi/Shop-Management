import _extends from "@babel/runtime/helpers/extends";
import React, { useCallback, useMemo, useState } from 'react';
import GlobalTheme from '@atlaskit/theme/components';
import ButtonBase from './shared/button-base';
import { getCss } from './shared/css';
import getIsOnlySingleIcon from './shared/get-is-only-single-icon';

function noop() {}

const isFirefox = typeof navigator !== 'undefined' && navigator.userAgent.toLowerCase().indexOf('firefox') > -1;
const ButtonWithMode = /*#__PURE__*/React.forwardRef(function ButtonWithMode({
  mode,
  onMouseDown: providedOnMouseDown = noop,
  onMouseUp: providedOnMouseUp = noop,
  ...rest
}, ref) {
  const appearance = rest.appearance || 'default';
  const spacing = rest.spacing || 'default';
  const shouldFitContainer = Boolean(rest.shouldFitContainer);
  const isSelected = Boolean(rest.isSelected);
  const isOnlySingleIcon = getIsOnlySingleIcon(rest);
  const [isActive, setIsActive] = useState(false); // Wrap onMouseDown / onMouseUp to manually trigger active state
  //  in Firefox

  const onMouseDown = useCallback(event => {
    providedOnMouseDown(event);

    if (isFirefox) {
      setIsActive(true);
    }
  }, [providedOnMouseDown, setIsActive]);
  const onMouseUp = useCallback(event => {
    providedOnMouseUp(event);

    if (isFirefox) {
      setIsActive(false);
    }
  }, [providedOnMouseUp, setIsActive]);
  const buttonCss = useMemo(() => getCss({
    appearance,
    spacing,
    mode,
    isSelected,
    shouldFitContainer,
    isOnlySingleIcon
  }), [appearance, spacing, mode, isSelected, shouldFitContainer, isOnlySingleIcon]);
  return /*#__PURE__*/React.createElement(ButtonBase, _extends({}, rest, {
    ref: ref,
    buttonCss: buttonCss // Due to how click events are set, we need to set active styles
    //  manually in Firefox and wrap onMouseDown/onMouseUp
    ,
    "data-firefox-is-active": isActive ? true : undefined,
    onMouseDown: onMouseDown,
    onMouseUp: onMouseUp
  }));
});
const Button = /*#__PURE__*/React.memo( /*#__PURE__*/React.forwardRef(function Button(props, ref) {
  return /*#__PURE__*/React.createElement(GlobalTheme.Consumer, null, ({
    mode
  }) => {
    return /*#__PURE__*/React.createElement(ButtonWithMode, _extends({}, props, {
      ref: ref,
      mode: mode
    }));
  });
})); // Tools including enzyme rely on components having a display name

Button.displayName = 'Button';
export default Button;