import _extends from "@babel/runtime/helpers/extends";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
import React, { useCallback, useMemo, useState } from 'react';
import GlobalTheme from '@atlaskit/theme/components';
import ButtonBase from './shared/button-base';
import { getCss } from './shared/css';
import getIsOnlySingleIcon from './shared/get-is-only-single-icon';

function noop() {}

var isFirefox = typeof navigator !== 'undefined' && navigator.userAgent.toLowerCase().indexOf('firefox') > -1;
var ButtonWithMode = /*#__PURE__*/React.forwardRef(function ButtonWithMode(_ref, ref) {
  var mode = _ref.mode,
      _ref$onMouseDown = _ref.onMouseDown,
      providedOnMouseDown = _ref$onMouseDown === void 0 ? noop : _ref$onMouseDown,
      _ref$onMouseUp = _ref.onMouseUp,
      providedOnMouseUp = _ref$onMouseUp === void 0 ? noop : _ref$onMouseUp,
      rest = _objectWithoutProperties(_ref, ["mode", "onMouseDown", "onMouseUp"]);

  var appearance = rest.appearance || 'default';
  var spacing = rest.spacing || 'default';
  var shouldFitContainer = Boolean(rest.shouldFitContainer);
  var isSelected = Boolean(rest.isSelected);
  var isOnlySingleIcon = getIsOnlySingleIcon(rest);

  var _useState = useState(false),
      _useState2 = _slicedToArray(_useState, 2),
      isActive = _useState2[0],
      setIsActive = _useState2[1]; // Wrap onMouseDown / onMouseUp to manually trigger active state
  //  in Firefox


  var onMouseDown = useCallback(function (event) {
    providedOnMouseDown(event);

    if (isFirefox) {
      setIsActive(true);
    }
  }, [providedOnMouseDown, setIsActive]);
  var onMouseUp = useCallback(function (event) {
    providedOnMouseUp(event);

    if (isFirefox) {
      setIsActive(false);
    }
  }, [providedOnMouseUp, setIsActive]);
  var buttonCss = useMemo(function () {
    return getCss({
      appearance: appearance,
      spacing: spacing,
      mode: mode,
      isSelected: isSelected,
      shouldFitContainer: shouldFitContainer,
      isOnlySingleIcon: isOnlySingleIcon
    });
  }, [appearance, spacing, mode, isSelected, shouldFitContainer, isOnlySingleIcon]);
  return /*#__PURE__*/React.createElement(ButtonBase, _extends({}, rest, {
    ref: ref,
    buttonCss: buttonCss // Due to how click events are set, we need to set active styles
    //  manually in Firefox and wrap onMouseDown/onMouseUp
    ,
    "data-firefox-is-active": isActive ? true : undefined,
    onMouseDown: onMouseDown,
    onMouseUp: onMouseUp
  }));
});
var Button = /*#__PURE__*/React.memo( /*#__PURE__*/React.forwardRef(function Button(props, ref) {
  return /*#__PURE__*/React.createElement(GlobalTheme.Consumer, null, function (_ref2) {
    var mode = _ref2.mode;
    return /*#__PURE__*/React.createElement(ButtonWithMode, _extends({}, props, {
      ref: ref,
      mode: mode
    }));
  });
})); // Tools including enzyme rely on components having a display name

Button.displayName = 'Button';
export default Button;